/*
 * DisplayForm.java
 *
 * Created on March 3, 2010, 3:51 PM
 */
package netvisualize;

//import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.*;
import java.util.Timer;

/**
 *
 * @author  hrushi
 */
public class DisplayForm extends javax.swing.JFrame {

    /* Static global program control flags */
    public static boolean TEST = false;
    /* Static Global intervals */
    public static int INTERVAL_REFERENCE = 10000;
    public static int INTERVAL_DLOAD = 5000;
    public static int INTERVAL_DPAINT = 5000;

    /* Static max variables */
    public static int MAX_HOSTS = 255;
    public static int MAX_VD = 255;

    /* Global file path variables */
    public static String PATH_HOSTS = System.getProperty("user.home") + "/.LifeNetData/config/hosts.txt";
    public static String PATH_GNST = System.getProperty("user.home") + "/.LifeNetData/config/gnst.txt";

    /* Static global variables */
    public static int refIndex1, refIndex2;
    public static double[][] coOrdS;

    /* Global variables */
    GnsmManager gnsm;
    ReferenceThread refThread;
    DistanceLoadThread dlThread;
    DisplayPaintThread dpThread;

    /** Creates new form DisplayForm */
    public DisplayForm() {
        initComponents();

        coOrdS = new double[MAX_HOSTS][2];

        if (!TEST) {
            refThread = new ReferenceThread(this, INTERVAL_REFERENCE);
            refThread.setRunning(true);
            refThread.start();

            dlThread = new DistanceLoadThread(this, INTERVAL_DLOAD);
            dlThread.setRunning(true);
            dlThread.start();

            dpThread = new DisplayPaintThread(this, INTERVAL_DPAINT);
            dpThread.setRunning(true);
            dpThread.start();
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 541, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
}//GEN-LAST:event_formFocusGained

private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
}//GEN-LAST:event_formWindowActivated

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
}//GEN-LAST:event_formWindowOpened

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    refThread.setRunning(false);
    dlThread.setRunning(false);
    dpThread.setRunning(false);
}//GEN-LAST:event_formWindowClosed

    /* Unit testing done */
    @Override
    public void paint(Graphics g) {

        GnsmManager gnsm = new GnsmManager(PATH_GNST, PATH_HOSTS);

        if (refIndex1 != -1 && refIndex2 != -1) {
            if (coOrdS[gnsm.getHostCount()-1][0] != 0 || coOrdS[gnsm.getHostCount()-1][1] != 0) {

                int circleDm = 60;
                int horMargin = 70;
                int verMargin = 60;
                int vertAdjustment = 20;
                int vertTextOff = 10;
                int horTextOff = 10;
                double scaleWidth = ((double) this.getBounds().width - (double) horMargin * 2) / (double) this.MAX_VD;
                double scaleHeight = ((double) this.getBounds().height - (double) verMargin * 2) / (double) this.MAX_VD;

                Graphics2D g2d = (Graphics2D) g;
                g2d.setColor(Color.BLUE);
                g2d.clearRect(0, 0, this.getBounds().width, this.getBounds().height);

                g2d.setColor(Color.WHITE);
                g2d.drawLine((int) (horMargin + 0 * scaleWidth), (int) (verMargin + vertAdjustment + 0 * scaleHeight), (int) (horMargin + 0 * scaleWidth), (int) (verMargin + vertAdjustment + MAX_VD * scaleHeight));
                g2d.drawLine((int) (horMargin + 0 * scaleWidth), (int) (verMargin + vertAdjustment + MAX_VD * scaleHeight), (int) (horMargin + MAX_VD * scaleWidth), (int) (verMargin + vertAdjustment + MAX_VD * scaleHeight));
                g2d.drawLine((int) (horMargin + MAX_VD * scaleWidth), (int) (verMargin + vertAdjustment + MAX_VD * scaleHeight), (int) (horMargin + MAX_VD * scaleWidth), (int) (verMargin + vertAdjustment + 0 * scaleHeight));
                g2d.drawLine((int) (horMargin + 0 * scaleWidth), (int) (verMargin + vertAdjustment + 0 * scaleHeight), (int) (horMargin + MAX_VD * scaleWidth), (int) (verMargin + vertAdjustment + 0 * scaleHeight));
                g2d.drawString("(0,0)", (int) (horMargin + 0 * scaleWidth), (int) (verMargin + vertAdjustment - vertTextOff + 0 * scaleHeight));
                g2d.drawString("(255,255)", (int) (horMargin + MAX_VD * scaleWidth), (int) (verMargin + vertAdjustment - vertTextOff + MAX_VD * scaleHeight));

                for (int i = 0; i < gnsm.getHostCount(); i++) {

                    g2d.setColor(Color.BLUE);
                    int circleOuterX = (int) (horMargin + coOrdS[i][0] * scaleWidth - circleDm / 2);
                    int circleOuterY = (int) (verMargin + vertAdjustment + coOrdS[i][1] * scaleHeight - circleDm / 2);
                    g2d.fillOval(circleOuterX, circleOuterY, circleDm, circleDm);

                    int circleDmInside = circleDm - 10;
                    g2d.setColor(Color.WHITE);
                    int circleInnerX = (int) (horMargin + coOrdS[i][0] * scaleWidth - circleDmInside / 2);
                    int circleInnerY = (int) (verMargin + vertAdjustment + (int) coOrdS[i][1] * scaleHeight - circleDmInside / 2);
                    g2d.fillOval(circleInnerX, circleInnerY, circleDmInside, circleDmInside);

                    g2d.setColor(Color.WHITE);
                    g2d.drawString(gnsm.getHostName(i), circleOuterX, circleOuterY - vertTextOff);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DisplayForm().setVisible(true);


            }
        });


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    String[] strArrHosts;
    String[] strArrMACs;
    Double[][] dblMatVD;
    Double[][] intLocation;
    int intHostCount;
    Double dblViewWidth;
    int intIndex1, intIndex2;
    int intStartFlag = 0;
    int intSyncFlag = 0;
    private static boolean DEBUG = false;
    private static int FILEBUFFER = 200000;
    private static double RANGE = 100;
    private static int MAXNUMHOSTS = 100;
    private static String STRFILEPATHSTATLIST = System.getProperty("user.home") + "/.LifeNetData/config/statlist_refined"; // with cmdline
    private static String STRFILEPATHHOSTS = System.getProperty("user.home") + "/.LifeNetData/config/hosts"; // with cmdline
    Timer timer;
    Timer timer2;
}
